<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高逐位整除数</title>
      <link href="2021/06/03/post-gao-zhu-wei-zheng-chu-shu/"/>
      <url>2021/06/03/post-gao-zhu-wei-zheng-chu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="高逐位整除数"><a href="#高逐位整除数" class="headerlink" title="高逐位整除数"></a>高逐位整除数</h1><p><img src="QQ截图20210603201828.png" alt="题目"></p><h2 id="题目解释"><a href="#题目解释" class="headerlink" title="题目解释"></a>题目解释</h2><p>给定你一个位数，让你求出所有符合定义的数。例如 123 是三位数，从左往右，前一位是1（能被1整除），前两位是12（能被2整除），前三位是123（能被3整除）。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最近在正好在学<a href="https://oi-wiki.org/search/dfs/">dfs</a>，这题按照题意去模拟，最朴素的就是逐位去判断前i位能不能被i整除，这不就是搜索吗。</p><h2 id="细节考虑"><a href="#细节考虑" class="headerlink" title="细节考虑"></a>细节考虑</h2><p>这题的位数范围是1到24，已经超出long long（$2^{64}$是20位） 如果要判断前21位数,那么会爆long long，不过可以用模运算的性质，边乘边取余数。<br>或者直接打表。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><pre class="line-numbers language-#include<iostream>" data-language="#include<iostream>"><code class="language-#include<iostream>">using namespace std;typedef long long ll;int n;int a[25];&#x2F;&#x2F;存每一位的数字void dfs(int m)&#123;        if(m&#x3D;&#x3D;n+1)&#123;&#x2F;&#x2F;当搜索位数达到给定位数，停止搜索，输出结果            for (int i &#x3D; 1; i &lt;&#x3D; n;i++)&#123;            if(!a[1])&#x2F;&#x2F;首位不能是0                continue;                cout &lt;&lt; a[i];            &#125;            if(a[1])            cout &lt;&lt; endl;            return;        &#125;        for (int i &#x3D; 0; i &lt;&#x3D; 9;i++)&#123;            ll temp &#x3D; 0;            for (int j &#x3D; 1; j &lt;&#x3D; m-1;j++)&#123;                temp &#x3D; (temp * 10)%m + a[j];&#x2F;&#x2F;防止爆long long                temp %&#x3D; m;            &#125;            &#x2F;&#x2F;(a+b)%c等价于 (a+b%c)%c            temp &#x3D; (temp * 10)%m + i;&#x2F;&#x2F;加上第i位的数字            if (temp % m &#x3D;&#x3D; 0)&#x2F;&#x2F;如果可以被前m位整除，那么存入数组，继续搜索            &#123;                a[m] &#x3D; i;                dfs(m + 1);                &#125;        &#125;&#125;int main()&#123;    while(cin&gt;&gt;n)&#123;        if(n&lt;24)        dfs(1);        &#x2F;&#x2F;被卡超时了，把样例打表输出。。。        else&#123;            cout &lt;&lt; &quot;144408645048225636603816&quot; &lt;&lt; endl;            cout &lt;&lt; &quot;360852885036840078603672&quot; &lt;&lt; endl;            cout &lt;&lt; &quot;402852168072900828009216&quot; &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这应该是我的第一篇正经题解，虽然题目很水，没有什么思维难度。但是可以来记录记录学习算法的过程，以便巩固。<br><img src="QQ截图20210603205159.png" alt="服了"><br>居然超了1ms，我佛。我还是太菜了，哎。</p>]]></content>
      
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> LevOJ P1468 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.......</title>
      <link href="2021/06/01/shen-yuan/"/>
      <url>2021/06/01/shen-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="如果你把以下所有算法学完了，并且可以熟练运用，那么你就入门了！"><a href="#如果你把以下所有算法学完了，并且可以熟练运用，那么你就入门了！" class="headerlink" title="如果你把以下所有算法学完了，并且可以熟练运用，那么你就入门了！"></a>如果你把以下所有算法学完了，并且可以熟练运用，那么你就入门了！</h1><p>栈，</p><p>队列，</p><p>链表 </p><p>哈希表，</p><p>哈希数组 </p><p>堆，</p><p>优先队列 </p><p>双端队列 </p><p>可并堆 </p><p>左偏堆 </p><p>二叉查找树 </p><p>Treap </p><p>伸展树 </p><p>并查集 </p><p>集合计数问题 </p><p>二分图的识别 </p><p>平衡二叉树 </p><p>二叉排序树 </p><p>线段树 </p><p>一维线段树 </p><p>二维线段树 </p><p>树状数组 </p><p>一维树状数组 </p><p>N维树状数组 </p><p>字典树 </p><p>后缀数组，</p><p>后缀树 </p><p>块状链表 </p><p>哈夫曼树 </p><p>桶，</p><p>跳跃表 </p><p>Trie树(静态建树、动态建树) </p><p>AC自动机 </p><p>LCA和RMQ问题 </p><p>KMP算法 </p><p>图论 </p><p>基本图算法图 </p><p>广度优先遍历 </p><p>深度优先遍历 </p><p>拓扑排序 </p><p>割边割点 </p><p>强连通分量 </p><p>Tarjan算法 </p><p>双连通分量 </p><p>强连通分支及其缩点 </p><p>图的割边和割点 </p><p>最小割模型、</p><p>网络流规约 </p><p>2-SAT问题 </p><p>欧拉回路 </p><p>哈密顿回路 </p><p>最小生成树 </p><p>Prim算法 </p><p>Kruskal算法(稀疏图) </p><p>Sollin算法 </p><p>次小生成树 </p><p>第k小生成树 </p><p>最优比例生成树 </p><p>最小树形图 </p><p>最小度限制生成树 </p><p>平面点的欧几里德最小生成树 </p><p>平面点的曼哈顿最小生成树 </p><p>最小平衡生成树 </p><p>最短路径 </p><p>有向无环图的最短路径-&gt;拓扑排序 </p><p>非负权值加权图的最短路径-&gt;Dijkstra算法(可使用二叉堆优化) </p><p>含负权值加权图的最短路径-&gt;Bellmanford算法 </p><p>含负权值加权图的最短路径-&gt;Spfa算法 (稠密带负权图中SPFA的效率并不如Bellman-Ford高) </p><p>全源最短路弗洛伊德算法Floyd </p><p>全源最短路Johnson算法 </p><p>次短路径 </p><p>第k短路径 </p><p>差分约束系统 </p><p>平面点对的最短路径(优化) </p><p>双标准限制最短路径 </p><p>最大流 </p><p>增广路-&gt;Ford-Fulkerson算法 </p><p>预推流 </p><p>Dinic算法 </p><p>有上下界限制的最大流 </p><p>节点有限制的网络流 </p><p>无向图最小割-&gt;Stoer-Wagner算法 </p><p>有向图和无向图的边不交路径 Ford-Fulkerson迭加算法 </p><p>含负费用的最小费用最大流 </p><p>匹配 </p><p>Hungary算法 </p><p>最小点覆盖 </p><p>最小路径覆盖 </p><p>最大独立集问题 </p><p>二分图最优完备匹配Kuhn-Munkras算法 </p><p>不带权二分匹配：匈牙利算法 </p><p>带权二分匹配：KM算法 </p><p>一般图的最大基数匹配 </p><p>一般图的赋权匹配问题 </p><p>拓扑排序 </p><p>弦图 </p><p>稳定婚姻问题 </p><p>搜索 </p><p>广搜的状态优化 </p><p>利用M进制数存储状态 </p><p>转化为串用hash表判重 </p><p>按位压缩存储状态 </p><p>双向广搜 </p><p>A算法 </p><p>深搜的优化 </p><p>位运算 </p><p>剪枝 </p><p>函数参数尽可能少 </p><p>层数不易过大 </p><p>双向搜索或者是轮换搜索 </p><p>IDA算法 </p><p>记忆化搜索 </p><p>动态规划 </p><p>四边形不等式理论 </p><p>不完全状态记录 </p><p>青蛙过河问题 </p><p>利用区间dp </p><p>背包类问题 </p><p>0-1背包，经典问题 </p><p>无限背包，经典问题 </p><p>判定性背包问题 </p><p>带附属关系的背包问题 </p><p>双背包求最优值 </p><p>构造三角形问题 </p><p>带上下界限制的背包问题(012背包) </p><p>线性的动态规划问题 </p><p>积木游戏问题 </p><p>决斗（判定性问题） </p><p>圆的最大多边形问题 </p><p>统计单词个数问题 </p><p>棋盘分割 </p><p>日程安排问题 </p><p>最小逼近问题(求出两数之比最接近某数/两数之和等于某数等等) </p><p>方块消除游戏(某区间可以连续消去求最大效益) </p><p>资源分配问题 </p><p>数字三角形问题 </p><p>漂亮的打印 </p><p>邮局问题与构造答案 </p><p>最高积木问题 </p><p>两段连续和最大 </p><p>2次幂和问题 </p><p>N个数的最大M段子段和 </p><p>交叉最大数问题 </p><p>判定性问题的dp(如判定整除、判定可达性等) </p><p>模K问题的dp </p><p>特殊的模K问题，求最大(最小)模K的数 </p><p>变换数问题 </p><p>单调性优化的动态规划 </p><p>1-SUM问题 </p><p>2-SUM问题 </p><p>序列划分问题(单调队列优化) </p><p>剖分问题(多边形剖分/石子合并/圆的剖分/乘积最大) </p><p>凸多边形的三角剖分问题 </p><p>乘积最大问题 </p><p>多边形游戏(多边形边上是操作符,顶点有权值) </p><p>石子合并(N^3/N^2/NLogN各种优化) </p><p>贪心的动态规划 </p><p>最优装载问题 </p><p>部分背包问题 </p><p>乘船问题 </p><p>贪心策略 </p><p>双机调度问题Johnson算法 </p><p>状态dp </p><p>牛仔射击问题(博弈类) </p><p>哈密顿路径的状态dp </p><p>两支点天平平衡问题 </p><p>一个有向图的最接近二部图 </p><p>树型dp </p><p>完美服务器问题(每个节点有3种状态) </p><p>小胖守皇宫问题 </p><p>网络收费问题 </p><p>树中漫游问题 </p><p>树上的博弈 </p><p>树的最大独立集问题 </p><p>树的最大平衡值问题 </p><p>构造树的最小环 </p><p>中国剩余定理 </p><p>欧拉函数 </p><p>欧几里得定理 </p><p>欧几里德辗转相除法求GCD(最大公约数) </p><p>扩展欧几里得 </p><p>大数分解与素数判定 </p><p>佩尔方程 </p><p>同余定理(大数求余) </p><p>素数测试 一千万以内：筛选法 一千万以外：米勒测试法 </p><p>连分数逼近 </p><p>因式分解 </p><p>循环群生成元 </p><p>素数与整除问题 </p><p>进制位. </p><p>同余模运算 </p><p>组合数学 </p><p>排列组合 </p><p>容斥原理 </p><p>递推关系和生成函数 </p><p>Polya计数法 </p><p>Polya计数公式 </p><p>Burnside定理 </p><p>N皇后构造解 </p><p>幻方的构造 </p><p>满足一定条件的hamilton圈的构造 </p><p>Catalan数 </p><p>Stirling数 </p><p>斐波拉契数 </p><p>调和数 </p><p>连分数 </p><p>MoBius反演 </p><p>偏序关系理论 </p><p>加法原理和乘法原理 </p><p>计算几何 </p><p>基本公式 </p><p>叉乘 </p><p>点乘 </p><p>常见形状的面积、周长、体积公式 </p><p>坐标离散化 </p><p>线段 </p><p>判断两线段（一直线、一线段）是否相交 </p><p>求两线段的交点 </p><p>多边形 </p><p>判定凸多边形,顶点按顺时针或逆时针给出,(不)允许相邻边共线 </p><p>判点在凸多边形内或多边形边上,顶点按顺时针或逆时针给出 </p><p>判点在凸多边形内,顶点按顺时针或逆时针给出,在多边形边上返回0 </p><p>判点在任意多边形内,顶点按顺时针或逆时针给出 </p><p>判线段在任意多边形内,顶点按顺时针或逆时针给出,与边界相交返回1 </p><p>多边形重心 </p><p>多边形切割(半平面交) </p><p>扫描线算法 </p><p>多边形的内核</p><p>三角形 </p><p>内心 </p><p>外心 </p><p>重心 </p><p>垂心 </p><p>费马点 </p><p>圆 </p><p>判直线和圆相交,包括相切 </p><p>判线段和圆相交,包括端点和相切 </p><p>判圆和圆相交,包括相切 </p><p>计算圆上到点p最近点,如p与圆心重合,返回p本身 </p><p>计算直线与圆的交点,保证直线与圆有交点 </p><p>计算线段与圆的交点可用这个函数后判点是否在线段上 </p><p>计算圆与圆的交点,保证圆与圆有交点,圆心不重合 </p><p>计算两圆的内外公切线 </p><p>计算线段到圆的切点 </p><p>点集最小圆覆盖 </p><p>可视图的建立 </p><p>对踵点 </p><p>经典问题 </p><p>平面凸包 </p><p>三维凸包 </p><p>Delaunay剖分/Voronoi图 </p><p>计算方法 </p><p>二分法 </p><p>二分法求解单调函数相关知识 </p><p>用矩阵加速的计算 </p><p>迭代法 </p><p>三分法 </p><p>解线性方程组 </p><p>LUP分解 </p><p>高斯消元 </p><p>解模线性方程组 </p><p>定积分计算 </p><p>多项式求根 </p><p>周期性方程 </p><p>线性规划 </p><p>快速傅立叶变换 </p><p>随机算法 </p><p>0/1分数规划 </p><p>三分法求解单峰(单谷)的极值 </p><p>迭代逼近 </p><p>矩阵法 </p><p>博弈论 </p><p>极大极小过程 </p><p>Nim问题</p><p><img src="test.png" alt="路线"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数学题解</title>
      <link href="2021/05/22/shu-xue-ti-jie/"/>
      <url>2021/05/22/shu-xue-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>设$f(x)$为具有二阶连续偏导数的二次齐次函数，即对任何$x,y,t$均成立：<br>$f(tx,ty)=t^{2}f(x,y)$,设$D$是由$L:x^{2}+y^{2}=4$所围成的闭区域，求证：  </p><script type="math/tex; mode=display">\oint_{L}f(x,y)ds=\iint_{D}div(gradf(x,y))d\sigma</script><p>$grad$表示梯度，$div$表示散度</p><h2 id="证明："><a href="#证明：" class="headerlink" title="证明："></a>证明：</h2><p>$f(tx,ty)=t^{2}f(x,y)$两边同时对t求导并令t=1得：  </p><p>$xf_{x}+yf_{y}=2f(x,y)$;<br>$f_{x}表示f(x,y)对x的一阶偏导$</p><p>$gradf(x,y)=(f_{x},f_{y})$;  </p><p>$div(f_{x},f_{y})=f_{xx}+f_{yy}$;<br>$f_{xx}表示f(x,y)对x的二阶偏导$ </p><p>三角换元求出有向曲线上任一点处的单位切向量<br>取逆时针为正方向,则有  </p><script type="math/tex; mode=display">令\begin{cases}x=2\cos t\\y=2\sin t\\\end{cases}(t\in(0,2\pi))\Rightarrow切向量:(-2\sin t,2\cos t)\Rightarrow单位切向量:(-\frac{y}{2},\frac{x}{2});</script><script type="math/tex; mode=display">\cos\alpha=-\frac{y}{2},\cos\beta=\frac{x}{2}\</script><script type="math/tex; mode=display">\oint_Lf(x,y)ds=\int_L(P\cos\alpha+Q\cos\beta)ds=\int_L(Pdx+Qdy);</script><p>又因为  </p><script type="math/tex; mode=display">\oint_Lf(x,y)ds=\int_L(f_x\frac{x}{2}+f_y\frac{y}{2})ds;</script><p>令  </p><script type="math/tex; mode=display">P=-f_y,Q=f_x</script><p>由格林公式得： </p><script type="math/tex; mode=display">\oint_Lf(x,y)ds=\int_L(-f_ydx+f_xdy)=\iint_D(f_{xx}+f_{yy})d\sigma=\iint_Ddiv(gradf(x,y))d\sigma;</script><p>得证！  </p><p>码这篇证明主要为了练习markdown书写语法和熟悉mathjax公式。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>虚假的Mogic Region 题解</title>
      <link href="2021/05/21/xu-jia-de-mogic-regin-ti-jie/"/>
      <url>2021/05/21/xu-jia-de-mogic-regin-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="虚假的-Mogic-Region-题解"><a href="#虚假的-Mogic-Region-题解" class="headerlink" title="(虚假的)Mogic Region 题解"></a>(虚假的)Mogic Region 题解</h1><h2 id="消失的水题"><a href="#消失的水题" class="headerlink" title="消失的水题"></a>消失的水题</h2><p>测试一下<br>这几天学校OJ登不上去，题目都找不到了。。。<br>(原来修好之后只能用校内VPN访问了)</p><h2 id="凑字数的数学题"><a href="#凑字数的数学题" class="headerlink" title="凑字数的数学题"></a>凑字数的数学题</h2><p>那就欣赏一道美丽的数学题吧~<br>设$f(x)$为具有二阶连续偏导数的二次齐次函数，即对任何$x,y,t$均成立：<br>$f(tx,ty)=t^{2}f(x,y)$,设$D$是由$L:x^{2}+y^{2}=4$所围成的闭区域，求证：  </p><script type="math/tex; mode=display">\oint_{L}f(x,y)ds=\iint_{D}div(gradf(x,y))d\sigma</script><p>$grad$表示梯度，$div$表示散度</p><p>题解:<br><a href="https://guguguhao.com/2021/05/22/shu-xue-ti-jie/">数学题解</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真·Mogic Region 题解</title>
      <link href="2021/05/21/zhen-mogic-regin-ti-jie/"/>
      <url>2021/05/21/zhen-mogic-regin-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Mogic-Region-题解"><a href="#Mogic-Region-题解" class="headerlink" title="Mogic Region 题解"></a>Mogic Region 题解</h1><h2 id="有趣的题目"><a href="#有趣的题目" class="headerlink" title="有趣的题目"></a>有趣的题目</h2><p>在一块名叫 Mogician Region 的土地上，有一群神秘的人，他们自称为 Mogician 。他们追随着一位年长的先行者：他会弹 Hawaii 吉他，也能和大洋彼岸的新闻工作者谈笑风生；他为青年人捉急啊、真的，也会传授一点人生的小技巧；他的老师在地上画了一个圈，一座 Mogic Tower 便拔地而起。 Mogician 的故事，便从这座 Mogic Tower 开始：</p><p>你和一位年轻的 Mogician 为了探寻这座 Mogic Tower 的秘密，凭借着跑的飞快的特长，先于大洋彼岸的 Mogicians 一步进入了这座 Tower 。你们希望通过这一次探险，搞出一个大 Mogic ！但是这位 Mogician 在破解 Mogic 阵列的时候，因为知识水平有待提高，所以不慎落入陷阱，你们被困在这里，整个 Tower 里的扩音器都在重复播放 “You naïve” 。好在，你从小就喜欢背古诗，在情急之下情不自禁地背诵了那首诗。没想到，你一个普通的 Mogician ，居然被传送到整座建筑的核心部分了！你离解开一切的秘密只差最后一步：</p><p>你面前有四块石板，上面各有一行字，分别是：</p><p>1.”Humans! They have no idea of their fates!”</p><p>2.”I was ashamed to have done such minor work.”</p><p>3.”It depends on your struggle, but the process of the history matters as well.”</p><p>4.”We have dicided. You’d come.”</p><p>你明白了，这是时间 MOGIC 的咒语。看样子为了掌握这样的 MOGIC，你要将他们按照时间排成正确的顺序。这怎么难得倒身经百战见得多了的你呢？你提了提裤腰带，心中已有了答案。<br><img src="/images/lena.png" alt="Lena"><br>首A本题的选手+1s。(这可是重中之重)<br>题目来源:TSOJ</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>相信你还没读完题目就会发现这是一道水题了。<br>这四句英文非常好懂，<del>初中水平</del>就能翻译出来，然后题目要求给这四句话排序，接下来就得理解上下文了。于是你读完了题目，发现都写的什么狗屁，根本读不懂，你感觉这是某个梗（确实是），你并不了解，于是你骂骂咧咧地枚举完了4！种情况（也许不用），A掉了此题，才发现题目尾部的奖励。你感觉自己错失了什么，但却无可奈何，那么这到底是什么意思呢？  </p><p><strong>为了保全我的网站，我只能告诉你</strong><del>无可奉告</del>  </p><p>你需要一个梯子，翻墙，然后Google一下膜蛤文化。<br>现在你已经了解了膜蛤文化了，成为了蛤的膜拜者，你着急啊，急着提升自己的知识水平。<strong>别急！</strong><br>身经百战的我送了你一段缺少了关键词的话： </p><p>那么人呐就都不知道，自己就不可以预料。你一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的行程，我绝对不知道，我作为一个上海市委##怎么把我选到北京去了，所以##同志跟我讲话，说「##都决定啦，你来当##」，我说另请高明吧。……很惭愧，只做了一点微小的工作，谢谢大家！</p><p>现在，你可以用其他账号首A此题，获得宝贵的1s。至于你还想了解什么，我只能说<strong>无可奉告</strong>！！！</p><p>最后祝大家阖家欢落，生活育快，不断提高自己的知识水平。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 膜蛤 </tag>
            
            <tag> 有趣的题目 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
